package com.multimedia.aes.gestnet_spak.printer_0554_0553;

import android.util.Log;

/**
 * ECMA-94 code page
 * @author Sergey Zaburunov
 */
public enum ECMA94 {
	//    unicode, ecma, unicode_high, unicode_low
	
	_0x80("\u2221", 0x80, 0x22, 0x21),
	_0x81("\u2221", 0x81, 0x22, 0x21), //unicode is not defined!!!
	_0x82("\u2207", 0x82, 0x22, 0x07),
	_0x83("\u221A", 0x83, 0x22, 0x1A),
	_0x84("\u222B", 0x84, 0x22, 0x2B),
	_0x85("\u03A3", 0x85, 0x03, 0xA3),
	_0x86("\u25B6", 0x86, 0x25, 0xB6),
	_0x87("\u03C0", 0x87, 0x03, 0xC0),
	_0x88("\u2202", 0x88, 0x22, 0x02),
	_0x89("\u2264", 0x89, 0x22, 0x64),
	_0x8A("\u2265", 0x8A, 0x22, 0x65),
	_0x8B("\u2260", 0x8B, 0x22, 0x60),
	_0x8C("\u03B1", 0x8C, 0x03, 0xB1),
	_0x8D("\u2192", 0x8D, 0x21, 0x92),
	_0x8E("\u2190", 0x8E, 0x21, 0x90),
	_0x8F("\u2193", 0x8F, 0x21, 0x93),
	                                
	_0x90("\u2191", 0x90, 0x21, 0x91),
	_0x91("\u03B3", 0x91, 0x03, 0xB3),
	_0x92("\u03B4", 0x92, 0x03, 0xB4),
	_0x93("\u03B5", 0x93, 0x03, 0xB5),
	_0x94("\u03B7", 0x94, 0x03, 0xB7),
	_0x95("\u03B8", 0x95, 0x03, 0xB8),
	_0x96("\u03BB", 0x96, 0x03, 0xBB),
	_0x97("\u03C1", 0x97, 0x03, 0xC1),
	_0x98("\u03C3", 0x98, 0x03, 0xC3),
	_0x99("\u03C4", 0x99, 0x03, 0xC4),
	_0x9A("\u03C9", 0x9A, 0x03, 0xC9),
	_0x9B("\u0394", 0x9B, 0x03, 0x94),
	_0x9C("\u03A0", 0x9C, 0x03, 0xA0),
	_0x9D("\u03A9", 0x9D, 0x03, 0xA9),
	_0x9E("\u25A0", 0x9E, 0x25, 0xA0),
	_0x9F("\u221E", 0x9F, 0x22, 0x1E),
                                  
	_0xA0("\u20AC", 0xA0, 0x20, 0xAC),
	/**
	 * inverted exclamation mark
	 */
	_0xA1("\u00a1", 0xA1, 0x00, 0xa1),
	/**
	 * cent sign
	 */
	_0xA2("\u00a2", 0xA2, 0x00, 0xa2),
	/**
	 * pound sign
	 */
	_0xA3("\u00a3", 0xA3, 0x00, 0xa3),
	/**
	 * currency sign
	 */
	_0xA4("\u00a4", 0xA4, 0x00, 0xa4),
	/**
	 * Yen sign
	 */
	_0xA5("\u00a5", 0xA5, 0x00, 0xa5),
	/**
	 * broken bar
	 */
	_0xA6("\u00a6", 0xA6, 0x00, 0xa6),
	/**
	 * paragraph sign
	 */
	_0xA7("\u00a7", 0xA7, 0x00, 0xa7),
	/**
	 * diaeresis
	 */
	_0xA8("\u00a8", 0xA8, 0x00, 0xa8),
	_0xA9("\u00a9", 0xA9, 0x00, 0xa9),
	_0xAA("\u00aA", 0xAA, 0x00, 0xaA),
	_0xAB("\u00aB", 0xAB, 0x00, 0xaB),
	_0xAC("\u00aC", 0xAC, 0x00, 0xaC),
	_0xAD("\u00aD", 0xAD, 0x00, 0xaD),
	_0xAE("\u00aE", 0xAE, 0x00, 0xaE),
	_0xAF("\u00aF", 0xAF, 0x00, 0xaF),
	                                
	_0xB0("\u00B0", 0xB0, 0x00, 0xB0),
	_0xB1("\u00B1", 0xB1, 0x00, 0xB1),
	_0xB2("\u00B2", 0xB2, 0x00, 0xB2),
	_0xB3("\u00B3", 0xB3, 0x00, 0xB3),
	_0xB4("\u00B4", 0xB4, 0x00, 0xB4),
	_0xB5("\u00B5", 0xB5, 0x00, 0xB5),
	_0xB6("\u00B6", 0xB6, 0x00, 0xB6),
	_0xB7("\u00B7", 0xB7, 0x00, 0xB7),
	_0xB8("\u00B8", 0xB8, 0x00, 0xB8),
	_0xB9("\u00B9", 0xB9, 0x00, 0xB9),
	_0xBA("\u00BA", 0xBA, 0x00, 0xBA),
	_0xBB("\u00BB", 0xBB, 0x00, 0xBB),
	_0xBC("\u00BC", 0xBC, 0x00, 0xBC),
	_0xBD("\u00BD", 0xBD, 0x00, 0xBD),
	_0xBE("\u00BE", 0xBE, 0x00, 0xBE),
	_0xBF("\u00BF", 0xBF, 0x00, 0xBF),
	                                
	_0xC0("\u00C0", 0xC0, 0x00, 0xC0),
	_0xC1("\u00C1", 0xC1, 0x00, 0xC1),
	_0xC2("\u00C2", 0xC2, 0x00, 0xC2),
	_0xC3("\u00C3", 0xC3, 0x00, 0xC3),
	/**
	 * &Auml;
	 */
	_0xC4("\u00C4", 0xC4, 0x00, 0xC4),
	_0xC5("\u00C5", 0xC5, 0x00, 0xC5),
	_0xC6("\u00C6", 0xC6, 0x00, 0xC6),
	_0xC7("\u00C7", 0xC7, 0x00, 0xC7),
	_0xC8("\u00C8", 0xC8, 0x00, 0xC8),
	_0xC9("\u00C9", 0xC9, 0x00, 0xC9),
	_0xCA("\u00CA", 0xCA, 0x00, 0xCA),
	_0xCB("\u00CB", 0xCB, 0x00, 0xCB),
	_0xCC("\u00CC", 0xCC, 0x00, 0xCC),
	_0xCD("\u00CD", 0xCD, 0x00, 0xCD),
	_0xCE("\u00CE", 0xCE, 0x00, 0xCE),
	_0xCF("\u00CF", 0xCF, 0x00, 0xCF),
                                  
	_0xD0("\u0110", 0xD0, 0x01, 0x10),
	_0xD1("\u00d1", 0xD1, 0x00, 0xd1),
	_0xD2("\u00d2", 0xD2, 0x00, 0xd2),
	_0xD3("\u00d3", 0xD3, 0x00, 0xd3),
	_0xD4("\u00d4", 0xD4, 0x00, 0xd4),
	_0xD5("\u00d5", 0xD5, 0x00, 0xd5),
	/**
	 * &Ouml;
	 */
	_0xD6("\u00d6", 0xD6, 0x00, 0xd6),
	_0xD7("\u0425", 0xD7, 0x04, 0x25),
	_0xD8("\u00F8", 0xD8, 0x00, 0xF8),
	_0xD9("\u00d9", 0xD9, 0x00, 0xd9),
	_0xDA("\u00da", 0xDA, 0x00, 0xda),
	_0xDB("\u00db", 0xDB, 0x00, 0xdb),
	/**
	 * &Uuml;
	 */
	_0xDC("\u00dc", 0xDC, 0x00, 0xdc),
	_0xDD("\u00dd", 0xDD, 0x00, 0xdd),
	_0xDE("\u00de", 0xDE, 0x00, 0xde),
	/**
	 * &szlig;
	 */
	_0xDF("\u00df", 0xDF, 0x00, 0xdf),
                                  
	_0xE0("\u00e0", 0xE0, 0x00, 0xe0),
	_0xE1("\u00e1", 0xE1, 0x00, 0xe1),
	_0xE2("\u00e2", 0xE2, 0x00, 0xe2),
	_0xE3("\u00e3", 0xE3, 0x00, 0xe3),
	/**
	 * &auml;
	 */
	_0xE4("\u00e4", 0xE4, 0x00, 0xe4),
	_0xE5("\u00e5", 0xE5, 0x00, 0xe5),
	_0xE6("\u00e6", 0xE6, 0x00, 0xe6),
	_0xE7("\u00e7", 0xE7, 0x00, 0xe7),
	_0xE8("\u00e8", 0xE8, 0x00, 0xe8),
	_0xE9("\u00e9", 0xE9, 0x00, 0xe9),
	_0xEA("\u00ea", 0xEA, 0x00, 0xea),
	_0xEB("\u00eb", 0xEB, 0x00, 0xeb),
	_0xEC("\u00ec", 0xEC, 0x00, 0xec),
	_0xED("\u00ed", 0xED, 0x00, 0xed),
	_0xEE("\u00ee", 0xEE, 0x00, 0xee),
	_0xEF("\u00ef", 0xEF, 0x00, 0xef),
                                  
	_0xF0("\u00F0", 0xF0, 0x00, 0xF0),
	_0xF1("\u00F1", 0xF1, 0x00, 0xF1),
	_0xF2("\u00F2", 0xF2, 0x00, 0xF2),
	_0xF3("\u00F3", 0xF3, 0x00, 0xF3),
	_0xF4("\u00F4", 0xF4, 0x00, 0xF4),
	_0xF5("\u00F5", 0xF5, 0x00, 0xF5),
	/**
	 * &ouml;
	 */
	_0xF6("\u00F6", 0xF6, 0x00, 0xF6),
	_0xF7("\u00F7", 0xF7, 0x00, 0xF7),
	_0xF8("\u00F8", 0xF8, 0x00, 0xF8),
	_0xF9("\u00F9", 0xF9, 0x00, 0xF9),
	_0xFA("\u00fa", 0xFA, 0x00, 0xFA),
	_0xFB("\u00fb", 0xFB, 0x00, 0xFb),
	/**
	 * &uuml;
	 */
	_0xFC("\u00Fc", 0xfc, 0x00, 0xFc),
	_0xFD("\u00Fd", 0xfd, 0x00, 0xFd),
	_0xFE("\u00Fe", 0xfe, 0x00, 0xFE),
	_0xFF("\u00Ff", 0xff, 0x00, 0xFF),
	/**
	 * special case: subscript 2
	 */
	_0x2082("\u2082", 0x32, 0x20, 0x82),
	/**
	 * special case: subscript 3
	 */
	_0x2083("\u2083", 0x33, 0x20, 0x83)
	;

	/**
	 * unicode representation
	 */
	private final String unicode;
	
	/**
	 * related testo byte, what will be sent to printer
	 */
	private final int testoByte;

	/**
	 * unicode low byte representation
	 */
	private final int unicodeLowByte;

	/**
	 * unicode high byte representation
	 */
	private final int unicodeHighByte;

	
	/**
	 * constructor
	 * @param unicode unicode representation
	 * @param testoByte related testo byte, what will be sent to printer
	 * @param unicodeHighByte unicode high byte
	 * @param unicodeLowByte unicode low byte
	 */
	ECMA94(String unicode, int testoByte, int unicodeHighByte, int unicodeLowByte) {
		this.unicode = unicode;
		this.testoByte = testoByte;
		this.unicodeLowByte = unicodeLowByte;
		this.unicodeHighByte = unicodeHighByte;
	}

	/**
	 * get unicode representation
	 * @return unicode
	 */
	public String getUnicode() {
		return this.unicode;
	}

	/**
	 * get related testo byte, what will be sent to printer
	 * @return testo byte for printer
	 */
	public int getTestobyte() {
		return this.testoByte;
	}

	/**
	 * unicode low byte representation
	 * @return unicode low byte
	 */
	public int getUnicodeLowByte() {
		return this.unicodeLowByte;
	}

	/**
	 * unicode high byte representation
	 * @return unicode high byte
	 */
	public int getUnicodeHighByte() {
		return this.unicodeHighByte;
	}

	/**
	 * get testo byte, what will be sent to printer, by unicode
	 * @param unicode unicode representation
	 * @return testo byte
	 */
	public static int getTestoByteByUnicode(String unicode){
		ECMA94 item = getItemByUnicode(unicode);
		Log.d("ECMA94", "getTestoByteByUnicode unicode=" + unicode + " item=" + item);
		
		if (item == null){
			char c = unicode.charAt(0);
			int retval = ((int) c) & 0x00FF;
			return retval;
		} else {
			return item.getTestobyte();
		}
		
	}

	
	/**
	 * get testo byte, what will be sent to printer, by unicode
	 * @param unicodeHighByte unicode high byte
	 * @param unicodeLowByte unicode low byte
	 * @return testo byte
	 */
	public static int getTestoByteByUnicodeBytes(int unicodeHighByte, int unicodeLowByte){
		ECMA94 item = getItemByUnicode(unicodeHighByte, unicodeLowByte);
		Log.d("ECMA94", "getTestoByteByUnicode unicode={" + unicodeHighByte + "," + unicodeLowByte + "} item=" + item);
		
		if (item == null){
			return unicodeLowByte;
		} else {
			return item.getTestobyte();
		}
		
	}

	/**
	 * get enum item by unicode
	 * @param unicode unicode
	 * @return enum item or null if not found 
	 */
	public static ECMA94 getItemByUnicode(String unicode){
		for (ECMA94 i : ECMA94.values()){
			if (i.getUnicode().equalsIgnoreCase(unicode))
				return i;
		}
		return null;
	}

	/**
	 * get enum item by unicode bytes
	 * @param unicodeHighByte unicode high byte
	 * @param unicodeLowByte unicode low byte
	 * @return enum item or null if not found 
	 */
	public static ECMA94 getItemByUnicode(int unicodeHighByte, int unicodeLowByte){
		for (ECMA94 i : ECMA94.values()){
			if ((i.getUnicodeLowByte() == unicodeLowByte) && (i.getUnicodeHighByte() == unicodeHighByte))
				return i;
		}
		return null;
	}

}; // enum
